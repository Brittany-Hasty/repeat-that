{"version":3,"sources":["components/navbar/navbar.jsx","components/game/game.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","type","data-toggle","data-target","to","id","React","Component","Game","props","robotSequence","playerSequence","gameInProgress","previousHighScore","allScores","document","addEventListener","onKeyPressed","bind","removeEventListener","this","e","keyCode","gameButtonClick","idx","length","gameOver","Object","values","getElementsByClassName","forEach","button","style","visibility","push","builtMessage","gameOverDiv","getElementById","innerText","classList","remove","disabled","buttonInSeq","repeatSeq","setTimeout","buttonPress","checkIfCorrect","add","Math","floor","random","displaySequence","leadButton","leaderboardDiv","innerHTML","sort","a","b","scoreNodes","map","score","builtLI","createElement","liText","createTextNode","appendChild","splice","builtOL","node","leaderboardTitle","onClick","leaderboardButtonClick","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OA2BeA,E,uKAtBP,OACI,yBAAKC,UAAU,yBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,iBACX,4BAAQC,KAAK,SAASD,UAAU,gBAAgBE,cAAY,WAAWC,cAAY,aAC/E,0BAAMH,UAAU,aAChB,0BAAMA,UAAU,aAChB,0BAAMA,UAAU,cAEpB,kBAAC,IAAD,CAAMI,GAAG,IAAIJ,UAAU,gBAAvB,iBAEJ,yBAAKA,UAAU,2BAA2BK,GAAG,YACzC,wBAAIL,UAAU,kBACV,wBAAIA,UAAU,UAAS,kBAAC,IAAD,CAAMI,GAAG,KAAT,iB,GAf9BE,IAAMC,W,QCyLZC,E,kDAzLX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,cAAgB,GACrB,EAAKC,eAAiB,GACtB,EAAKC,gBAAiB,EACtB,EAAKC,mBAAqB,EAC1B,EAAKC,UAAY,GACjBC,SAASC,iBAAiB,UAAW,EAAKC,aAAaC,KAAlB,iBAPvB,E,mEAWdH,SAASI,oBAAoB,UAAWC,KAAKH,aAAaC,KAAKE,S,mCAGtDC,GACQ,KAAdA,EAAEC,SACDF,KAAKG,gBAAgB,W,uCAKzB,IAAIC,EAAMJ,KAAKT,eAAec,OAAS,EACnCL,KAAKV,cAAcc,KAASJ,KAAKT,eAAea,IAChDJ,KAAKM,a,iCAKTC,OAAOC,OAAOb,SAASc,uBAAuB,gBAC7CC,SAAQ,SAACC,GACNA,EAAOC,MAAMC,WAAa,YAE9Bb,KAAKR,gBAAiB,EACtBQ,KAAKN,UAAUoB,KAAKd,KAAKV,cAAce,OAAS,GAC5CL,KAAKV,cAAce,OAAS,EAAIL,KAAKP,oBACrCO,KAAKP,kBAAoBO,KAAKV,cAAce,OAAS,GAGzD,IAAIU,EAAe,yBAA2Bf,KAAKV,cAAce,OAAS,GAAK,MAC/C,IAA5BL,KAAKP,oBACLsB,GAAgB,gCAAkCf,KAAKP,kBAAoB,MAE/EsB,GAAgB,sCAChB,IAAIC,EAAcrB,SAASsB,eAAe,aAC7BtB,SAASsB,eAAe,cAC9BC,UAAYH,EACnBC,EAAYG,UAAUC,OAAO,UAE7BpB,KAAKV,cAAgB,GACrBU,KAAKT,eAAiB,K,wCAGR,IAAD,OAEbgB,OAAOC,OAAOb,SAASc,uBAAuB,gBAC7CC,SAAQ,SAACC,GACNA,EAAOC,MAAMC,WAAa,SAC1BF,EAAOU,UAAW,KAGtBrB,KAAKV,cAAcoB,SAAQ,SAACY,EAAalB,GAErC,IAAImB,GAAY,EACbnB,EAAM,EAAKd,cAAce,OAAO,GAC5BiB,IAAgB,EAAKhC,cAAcc,EAAI,KACtCmB,GAAY,GAIpBC,YAAW,WACP7B,SAASsB,eAAeK,GAAaV,MAAMC,WAAW,YAC/C,KAAPT,EAAI,IAIRoB,YAAW,WACP7B,SAASsB,eAAeK,GAAaV,MAAMC,WAAW,WACvDU,EAAqB,KAAPnB,EAAI,GAAS,IAAc,KAAPA,EAAI,OAI7CoB,YAAW,WACPjB,OAAOC,OAAOb,SAASc,uBAAuB,gBAC7CC,SAAQ,SAACC,GACNA,EAAOC,MAAMC,WAAa,UAC1BF,EAAOU,UAAW,OAEO,KAA7BrB,KAAKV,cAAce,OAAO,M,sCAGlBoB,GACQ,UAAhBA,GAA2BzB,KAAKR,gBAChCQ,KAAKT,eAAeuB,KAAKW,GACzBzB,KAAK0B,mBAEL1B,KAAKR,gBAAiB,EACJG,SAASsB,eAAe,aAC9BE,UAAUQ,IAAI,WAG1B3B,KAAKR,gBACLQ,KAAKV,cAAce,SACnBL,KAAKT,eAAec,SAChBL,KAAKT,eAAiB,GACtBS,KAAKV,cAAcwB,KAAKc,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,GACxD9B,KAAK+B,qB,+CAKb,IAAIC,EAAarC,SAASsB,eAAe,sBACrCgB,EAAiBtC,SAASsB,eAAe,eAC7C,GAA4B,yBAAzBe,EAAWd,UAAqC,CAG/C,GAFAc,EAAWd,UAAY,wBACvBe,EAAeC,UAAY,GACxBlC,KAAKN,UAAUW,OAAS,EAAE,CACzBL,KAAKN,UAAUyC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAED,KAEhC,IAAIE,EAAatC,KAAKN,UAAU6C,KAAI,SAACC,GACjC,IAAIC,EAAU9C,SAAS+C,cAAc,MACjCC,EAAShD,SAASiD,eAAeJ,EAAQ,WAE7C,OADAC,EAAQI,YAAYF,GACbF,KACRK,OAAO,EAAG,IAETC,EAAUpD,SAAS+C,cAAc,MACrCJ,EAAW5B,SAAQ,SAACsC,GAChBD,EAAQF,YAAYG,MAGxB,IAAIC,EAAmBtD,SAAS+C,cAAc,MAC9CO,EAAiB/B,UAAY,8BAC7Be,EAAeY,YAAYI,GAC3BhB,EAAeY,YAAYE,QAE3Bd,EAAef,UAAY,8CAE/Be,EAAed,UAAUC,OAAO,eAEhCY,EAAWd,UAAY,uBACvBe,EAAed,UAAUQ,IAAI,Y,+BAI3B,IAAD,OACL,OACI,6BACI,yBAAK/C,UAAU,aACX,qDACA,qKACA,+EACA,4BAAQA,UAAU,eAAesE,QAAS,kBAAM,EAAK/C,gBAAgB,WAArE,UAGA,4BAAQlB,GAAG,qBAAqBiE,QAAS,kBAAM,EAAKC,2BAApD,yBAIJ,yBAAKlE,GAAG,cAAcL,UAAU,qBAChC,yBAAKK,GAAG,YAAYL,UAAU,2BAC1B,8CAA2B,uBAAGK,GAAG,gBAErC,yBAAKL,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,4BAAQA,UAAU,oBAAoBK,GAAG,IAAIiE,QAAS,kBAAM,EAAK/C,gBAAgB,OAErF,yBAAKvB,UAAU,YACX,4BAAQA,UAAU,qBAAqBK,GAAG,IAAIiE,QAAS,kBAAM,EAAK/C,gBAAgB,QAG1F,yBAAKvB,UAAU,OACX,yBAAKA,UAAU,YACX,4BAAQA,UAAU,kBAAkBK,GAAG,IAAIiE,QAAS,kBAAM,EAAK/C,gBAAgB,OAEnF,yBAAKvB,UAAU,YACX,4BAAQA,UAAU,mBAAmBK,GAAG,IAAIiE,QAAS,kBAAM,EAAK/C,gBAAgB,c,GAjLzFjB,IAAMC,WCYViE,MATf,WACE,OACE,yBAAKxE,UAAU,OACb,kBAAC,IAAD,CAAOyE,KAAK,IAAIC,UAAW3E,IAC3B,kBAAC,IAAD,CAAO4E,OAAK,EAACF,KAAK,IAAIC,UAAWlE,MCGnBoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFnE,SAASsB,eAAe,SDuHpB,kBAAmB8C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1a80089c.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Navbar extends React.Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-inverse\">\n                <div className=\"container-fluid\">\n                    <div className=\"navbar-header\">\n                        <button type=\"button\" className=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#myNavbar\">\n                            <span className=\"icon-bar\"></span>\n                            <span className=\"icon-bar\"></span>\n                            <span className=\"icon-bar\"></span>\n                        </button>\n                        <Link to=\"/\" className=\"navbar-brand\">Repeat That!</Link>\n                    </div>\n                    <div className=\"collapse navbar-collapse\" id=\"myNavbar\">\n                        <ul className=\"nav navbar-nav\">\n                            <li className=\"active\"><Link to=\"/\">Game</Link></li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n        )\n    }\n}\n\nexport default Navbar;","import React from 'react';\n\nclass Game extends React.Component {\n    constructor(props){\n        super(props);\n        this.robotSequence = [];\n        this.playerSequence = [];\n        this.gameInProgress = false;\n        this.previousHighScore = -1;\n        this.allScores = [];\n        document.addEventListener(\"keydown\", this.onKeyPressed.bind(this));\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.onKeyPressed.bind(this));\n    } \n\n    onKeyPressed(e) {\n        if(e.keyCode === 32){\n            this.gameButtonClick(\"start\");\n        }\n    }\n\n    checkIfCorrect(){\n        let idx = this.playerSequence.length - 1;\n        if (this.robotSequence[idx] !== this.playerSequence[idx]){\n            this.gameOver();\n        } \n    }\n\n    gameOver(){\n        Object.values(document.getElementsByClassName(\"game-button\"))\n        .forEach((button) => {\n            button.style.visibility = 'hidden';\n        })\n        this.gameInProgress = false;\n        this.allScores.push(this.robotSequence.length - 1);\n        if (this.robotSequence.length - 1 > this.previousHighScore){\n            this.previousHighScore = this.robotSequence.length - 1;\n        }\n\n        let builtMessage = \"Your final score was \" + (this.robotSequence.length - 1) + \". \";\n        if (this.previousHighScore !== -1){\n            builtMessage += \"Your highest score so far is \" + this.previousHighScore + \". \";\n        }\n        builtMessage += \"Play again to beat your high score!\";\n        let gameOverDiv = document.getElementById(\"game-over\");\n        let scoreP = document.getElementById(\"score-text\");\n        scoreP.innerText = builtMessage;\n        gameOverDiv.classList.remove(\"hidden\");\n        \n        this.robotSequence = [];\n        this.playerSequence = [];\n    }\n\n    displaySequence(){\n        // Hide and disable all buttons before showing the sequence\n        Object.values(document.getElementsByClassName(\"game-button\"))\n        .forEach((button) => {\n            button.style.visibility = 'hidden';\n            button.disabled = true;\n        })\n\n        this.robotSequence.forEach((buttonInSeq, idx) => {\n            // Variable indicator if button is repeated in the sequence\n            let repeatSeq = false;\n            if(idx < this.robotSequence.length-1 \n                && buttonInSeq === this.robotSequence[idx+1]){\n                    repeatSeq = true;\n            }\n\n            // Schedule this button to show up in one second\n            setTimeout(()=>{\n                document.getElementById(buttonInSeq).style.visibility='visible'\n            }, (idx+1)*1000)\n\n            // Schedule this button to disappear after two seconds\n            // (Or slightly faster if it is a repeated button)\n            setTimeout(()=>{\n                document.getElementById(buttonInSeq).style.visibility='hidden'\n            }, repeatSeq ? ((idx+2)*1000)-100 : (idx+2)*1000);\n        })\n\n        // Schedule the buttons to reappear after the sequence completes\n        setTimeout(()=>{\n            Object.values(document.getElementsByClassName(\"game-button\"))\n            .forEach((button) => {\n                button.style.visibility = 'visible';\n                button.disabled = false;\n            })\n        }, (this.robotSequence.length+1)*1000)\n    }\n        \n    gameButtonClick(buttonPress){\n        if (buttonPress !== \"start\" && this.gameInProgress){\n            this.playerSequence.push(buttonPress);\n            this.checkIfCorrect();\n        } else {\n            this.gameInProgress = true;\n            let gameOverDiv = document.getElementById(\"game-over\");\n            gameOverDiv.classList.add(\"hidden\");\n        }\n\n        if (this.gameInProgress &&\n            this.robotSequence.length ===\n            this.playerSequence.length){\n                this.playerSequence = [];\n                this.robotSequence.push(Math.floor(Math.random() * 4) + 1);\n                this.displaySequence();\n        }\n    }\n\n    leaderboardButtonClick(){\n        let leadButton = document.getElementById(\"leaderboard-button\");\n        let leaderboardDiv = document.getElementById(\"leaderboard\");\n        if(leadButton.innerText === \"See the leaderboard!\"){\n            leadButton.innerText = \"Close the leaderboard\";\n            leaderboardDiv.innerHTML = \"\";\n            if(this.allScores.length > 0){\n                this.allScores.sort((a, b) => b-a);\n        \n                let scoreNodes = this.allScores.map((score)=>{\n                    let builtLI = document.createElement(\"li\");\n                    let liText = document.createTextNode(score + \" points\");\n                    builtLI.appendChild(liText);\n                    return builtLI; \n                }).splice(0, 10);\n                \n                let builtOL = document.createElement(\"ol\");\n                scoreNodes.forEach((node)=>{\n                    builtOL.appendChild(node);\n                });\n\n                let leaderboardTitle = document.createElement(\"h2\");\n                leaderboardTitle.innerText = \"Leaderboard: Top 10 Scores!\";\n                leaderboardDiv.appendChild(leaderboardTitle);\n                leaderboardDiv.appendChild(builtOL);\n            } else {\n                leaderboardDiv.innerText = \"There are no high scores yet! Be the first!\";\n            }\n            leaderboardDiv.classList.remove(\"hidden\");\n        } else {\n            leadButton.innerText = \"See the leaderboard!\";\n            leaderboardDiv.classList.add(\"hidden\");\n        }\n    }\n    \n    render() {\n        return (\n            <div>\n                <div className=\"jumbotron\">\n                    <h1>Repeat that sequence!</h1>\n                    <p>Repeat Simon's sequence and it will add another button for you to repeat. Get a high score, and you might just get on the leaderboard.</p>\n                    <p>Press the spacebar or the start button to begin!</p>\n                    <button className=\"start-button\" onClick={() => this.gameButtonClick(\"start\")}>\n                        Start!\n                    </button>\n                    <button id=\"leaderboard-button\" onClick={() => this.leaderboardButtonClick()}>\n                        See the leaderboard!\n                    </button>\n                </div>\n                <div id=\"leaderboard\" className=\"jumbotron hidden\"></div>\n                <div id=\"game-over\" className=\"alert alert-info hidden\">\n                    <strong>Game Over!</strong><p id=\"score-text\"></p>\n                </div>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-xs-6\">\n                            <button className=\"game-button green\" id=\"1\" onClick={() => this.gameButtonClick(1)} />\n                        </div>\n                        <div className=\"col-xs-6\">\n                            <button className=\"game-button yellow\" id=\"2\" onClick={() => this.gameButtonClick(2)} />\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-xs-6\">\n                            <button className=\"game-button red\" id=\"4\" onClick={() => this.gameButtonClick(4)} />\n                        </div>\n                        <div className=\"col-xs-6\">\n                            <button className=\"game-button blue\" id=\"3\" onClick={() => this.gameButtonClick(3)} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Game;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport Navbar from './components/navbar/navbar';\nimport Game from './components/game/game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Navbar} />\n      <Route exact path=\"/\" component={Game} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  HashRouter\n} from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}